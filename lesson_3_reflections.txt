1. When would you want to use a remote repository rather than keeping all your work
local?

    When working with others on a common project
    When wanting to make your work available to others
    When seeking feedback on your work from others
    When working from more than one computer
    As back up in case of local data loss

2. Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You can be working on something remotely which is not yet ready for sharing.
    You want to make an active decision to share from a local respository to github which is public
    Even if the files on github are private you may still not want to push everything automatically 
    as you may experiment locally and only push to github certain parts of the work.

3. Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Clones are copies of a repository from GitHub to my local drive, or from one local area to another
    Forks are like clones but are a rom one GitHub repository to another GitHyb repository
    Branches allow a new set of commits to be set up separate from the master

    Clones are used to create a local copy of a GitHub respository.  They allow working locally and in private before sharing on GitHub
    Forks are used to allow individuals, other than the owner of the original repository, to develop the work done on the original repository
    Branches are used for a variety of reasons when you want to carry out additional work but continue to keep a copy of the master - see answers to lesson 2.

4. What is the benefit of having a copy of the last known state of the remote
stored locally?

    A copy of the remote can be downloaded without having to merge it e.g. for off line working.
    Work reconciling the current repository and the last known remote commit can take place off line.

5. How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Harder - it would be much hard to keep track of all the changes, pull requests without some form of version control.
    Some informal version of version control would need to be constructed and implemented.
    Easier - possibly if the work was very simple and people didn't know how to use GitHub then some informal system may be easier e.g. with sharing of recipes

6. When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When you want to give other collaborators the opportunity to comment on the changes that you have made before they are committed to the main branch
